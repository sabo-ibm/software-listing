# Windows script para listar swg instalado en un servidor
# Necesita correr bajo Power Shell con usuario con Admin privileges
# Resultados y system specs guardados a disco
# April 2025 

$softwareList = @("IBM", "mettle", "ibm", "api", "app", "db2", "cognos", "microsoft", "xbox", "MICROSOFT", "Microsoft", "Xbox")

$includeHKU = $true

# Registry paths para 64-bit, 32-bit, user software
$registryPaths = @(
    "HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\*"
    "HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*"
    "HKCU:\Software\Microsoft\Windows\CurrentVersion\Uninstall\*"
    "HKCU:\Software\Wow6432Node\Windows\CurrentVersion\Uninstall\*"
    "HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\*"
    "HKCU:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*"
)

if ($includeHKU) {
    Write-Host "Get users: List SIDs - HKU..."
    $userSIDs = Get-ChildItem -Path "HKU:\" -ErrorAction SilentlyContinue | 
                Where-Object { $_.PSChildName -match '^S-1-5-21-' -and $_.PSChildName -notlike '*_Classes' } | 
                Select-Object -ExpandProperty PSChildName
    foreach ($sid in $userSIDs) {
        $registryPaths += "HKU:\$sid\Software\Microsoft\Windows\CurrentVersion\Uninstall\*"
    }
    Write-Host "Para $($userSIDs.Count) user SIDs for HKU search"
}

# Software de hives
Write-Host "Querying software en $($registryPaths.Count) hives ..."
$software = $registryPaths | ForEach-Object {
    $path = $_
    Write-Host "Procesando hive: $path"
    Get-ItemProperty -Path $path -ErrorAction SilentlyContinue | 
    Where-Object { $_.DisplayName } | 
    Select-Object DisplayName, DisplayVersion, Publisher, InstallDate, @{Name="RegistryPath";Expression={$path}}
} | Sort-Object DisplayName -Unique


#Matching vs software list 
$filteredSoftware = $software | Where-Object { 
    $name = $_.DisplayName
    $softwareList | Where-Object { $name -like "*$_*" }
}

$serverName = (Get-CimInstance -ClassName Win32_ComputerSystem).Name
$serverName = $serverName -replace '[\\\/:*?"<>|]', '_'

# Bajando software inventory
Write-Host "Bajando software inventory a disco ..."
$outputFile = "SoftwareInventory_$serverName.csv"  # Adjust path as needed
$filteredSoftware | Export-Csv -Path $outputFile -NoTypeInformation

# Display results
Write-Host "Se encontro $($filteredSoftware.Count) matching software "
Write-Host "Bajando a: $outputFile"

# System Specs
Write-Host "System specs ..."
$specsOutputFile = "SystemSpecs_$serverName.txt"  # Adjust path as needed
$computerSystem = Get-CimInstance -ClassName Win32_ComputerSystem
$os = Get-CimInstance -ClassName Win32_OperatingSystem
$processor = Get-CimInstance -ClassName Win32_Processor | Select-Object -First 1
$bios = Get-CimInstance -ClassName Win32_BIOS

$specs = @"
System Specifications
--------------------
Generated: $(Get-Date)

System Model:
$($computerSystem.Manufacturer) $($computerSystem.Model)

Computer Name:
$($computerSystem.Name)

Processor Type:
$($processor.Name)

Number of Physical Processors:
$($computerSystem.NumberOfProcessors)

Number of Logical Processors:
$($computerSystem.NumberOfLogicalProcessors)

Total Physical Memory:
$([math]::Round($computerSystem.TotalPhysicalMemory / 1GB, 2)) GB

Operating System:
$($os.Caption) $($os.Version)

Service Pack:
$($os.ServicePackMajorVersion).$($os.ServicePackMinorVersion)

BIOS Version:
$($bios.SMBIOSBIOSVersion)
"@

# Save specs to file
$specs | Out-File -FilePath $specsOutputFile -Encoding UTF8

# Step 6: Completion
Write-Host "System specifications bajadas a: $specsOutputFile"
Write-Host "Done."