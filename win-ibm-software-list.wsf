# Windows script to find installed software matching specific criteria

# Option 1: Search for a specific string
$searchString = "IBM"  # Replace with your software name/pattern

# Option 2: Use an array of software names to match against
$softwareList = @("IBM" "mettle" "ibm", "api", "app", "db2", "cognos", "mq")

# Get installed software from registry (both 32-bit and 64-bit locations)
$software = Get-ItemProperty "HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\*" `
    -ErrorAction SilentlyContinue | 
    Where-Object { $_.DisplayName } |
    Select-Object DisplayNam

$software += Get-ItemProperty "HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*" `
    -ErrorAction SilentlyContinue | 
    Where-Object { $_.DisplayName } |
    Select-Object DisplayName, DisplayVersion, Publisher, InstallDate

# Filter results - Choose ONE of these options:

# Option 1: Filter by single string
$filteredSoftware = $software | Where-Object { $_.DisplayName -like "*$searchString*" }

# Option 2: Filter by list of software names
# $filteredSoftware = $software | Where-Object { 
#     $name = $_.DisplayName
#     $softwareList | Where-Object { $name -like "*$_*" }
# }

# Get current date for filename
$date = Get-Date -Format "yyyyMMdd_HHmmss"

# Get server name
$serverName = $env:COMPUTERNAME

# Save results to a CSV file
$outputFile = "C:\Temp\SoftwareInventory_$serverName_$date.csv"  # Adjust path as needed
$filteredSoftware | Export-Csv -Path $outputFile -NoTypeInformation

Write-Host "Found $($filteredSoftware.Count) matching software installations"
Write-Host "Results saved to: $outputFile"


$outputFileSvr = "C:\Temp\Server_$serverName_$date.csv"  # Adjust path as needed
# Create a string builder to collect all information
$sb = New-Object System.Text.StringBuilder

# Get OS Information
$os = Get-CimInstance Win32_OperatingSystem
[void]$sb.AppendLine("=== Operating System Information ===")
[void]$sb.AppendLine("OS Name: " + $os.Caption)
[void]$sb.AppendLine("Version: " + $os.Version)
[void]$sb.AppendLine("Build Number: " + $os.BuildNumber)
[void]$sb.AppendLine("Install Date: " + $os.InstallDate)
[void]$sb.AppendLine("Last Boot Time: " + $os.LastBootUpTime)
[void]$sb.AppendLine("")

# Get Processor Information
$processors = Get-CimInstance Win32_Processor
[void]$sb.AppendLine("=== Processor Information ===")
[void]$sb.AppendLine("Number of Processors: " + $processors.Count)
foreach ($proc in $processors) {
    [void]$sb.AppendLine("Processor: " + $proc.Name)
    [void]$sb.AppendLine("Manufacturer: " + $proc.Manufacturer)
    [void]$sb.AppendLine("Max Clock Speed: " + $proc.MaxClockSpeed + " MHz")
    [void]$sb.AppendLine("Number of Cores: " + $proc.NumberOfCores)
    [void]$sb.AppendLine("Number of Logical Processors: " + $proc.NumberOfLogicalProcessors)
    [void]$sb.AppendLine("Current Clock Speed: " + $proc.CurrentClockSpeed + " MHz")
    [void]$sb.AppendLine("")
}

# Get Memory Information
$memory = Get-CimInstance Win32_ComputerSystem
$physicalMemory = Get-CimInstance Win32_PhysicalMemory
[void]$sb.AppendLine("=== Memory Information ===")
[void]$sb.AppendLine("Total Physical Memory: " + [math]::Round($memory.TotalPhysicalMemory/1GB, 2) + " GB")
[void]$sb.AppendLine("Number of Memory Modules: " + $physicalMemory.Count)
foreach ($mem in $physicalMemory) {
    [void]$sb.AppendLine("Memory Module: " + $mem.Capacity/1GB + " GB")
    [void]$sb.AppendLine("Speed: " + $mem.Speed + " MHz")
    [void]$sb.AppendLine("Manufacturer: " + $mem.Manufacturer)
    [void]$sb.AppendLine("")
}

# Get Computer System Information
$computer = Get-CimInstance Win32_ComputerSystem
[void]$sb.AppendLine("=== System Information ===")
[void]$sb.AppendLine("Computer Name: " + $computer.Name)
[void]$sb.AppendLine("Manufacturer: " + $computer.Manufacturer)
[void]$sb.AppendLine("Model: " + $computer.Model)
[void]$sb.AppendLine("")

# Save to file
$sb.ToString() | Out-File $outputFileSvr